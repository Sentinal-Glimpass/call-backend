const express = require('express');
const router = express.Router();
const fs = require('fs');
const path = require('path');
const { groqClient } = require('../utils/groqClient');
const { 
  authenticateToken, 
  validateResourceOwnership, 
  auditLog 
} = require('../middleware/authMiddleware');
const { 
  createValidationMiddleware 
} = require('../middleware/validationMiddleware');

/**
 * @swagger
 * tags:
 *   name: MarkAible AI
 *   description: AI prompt generation and management for voice agents
 */

// Ensure sample-prompts directory exists
const SAMPLE_PROMPTS_DIR = path.join(__dirname, '../../sample-prompts');
if (!fs.existsSync(SAMPLE_PROMPTS_DIR)) {
  fs.mkdirSync(SAMPLE_PROMPTS_DIR, { recursive: true });
}

// Validation schemas
const validationSchemas = {
  promptGeneration: createValidationMiddleware({
    body: {
      agentName: {
        required: true,
        validate: 'isValidAlphanumeric',
        sanitize: 'sanitizeString',
        minLength: 1,
        maxLength: 100
      },
      aiName: {
        required: true,
        validate: 'isValidAlphanumeric',
        sanitize: 'sanitizeString',
        minLength: 1,
        maxLength: 50
      },
      gender: {
        required: true,
        validate: (value) => ['male', 'female'].includes(value.toLowerCase()) || 'Gender must be male or female',
        sanitize: 'sanitizeString'
      },
      language: {
        required: true,
        validate: (value) => ['hinglish', 'english'].includes(value.toLowerCase()) || 'Language must be hinglish or english',
        sanitize: 'sanitizeString'
      },
      callType: {
        required: true,
        validate: (value) => ['inbound', 'outbound'].includes(value.toLowerCase()) || 'Call type must be inbound or outbound',
        sanitize: 'sanitizeString'
      },
      script: {
        required: true,
        sanitize: 'sanitizeString',
        minLength: 10,
        maxLength: 5000
      },
      welcomeMessage: {
        required: false,
        sanitize: 'sanitizeString',
        maxLength: 500
      },
      selectedVoice: {
        required: false,
        sanitize: 'sanitizeString',
        maxLength: 50
      },
      aiModel: {
        required: false,
        sanitize: 'sanitizeString',
        maxLength: 50
      },
      callTimeout: {
        required: false,
        validate: 'isValidPositiveInteger'
      }
    }
  })
};

// AI system instruction for generating structured prompts
const aiSystemInstruction = `
You are an AI assistant responsible for processing script content from the payload and creating a formatted prompt.

Your task:
1. Take the script content provided in the payload
2. Analyze the script and restructure it into the following sections:
   - Greeting and Introduction
   - Opening Context or Hook
   - Interest-Based Branching (Yes / No / Unsure)
   - Qualification questions (open-ended, not hard-coded)
   - Solution Pitch (always flexible and general)
   - Closing and next steps

3. Return a complete prompt that includes all fields from the original payload:
   - agentName
   - welcomeMessage
   - selectedVoice
   - aiName
   - gender
   - aiModel
   - callTimeout
   - script (restructured according to the sections above)
   - language
   - callType

Add the following field to the response:
- outputNote: "This prompt was generated by MarkAible's AI prompt generation system based on a reference prompt."

Ensure the restructured script maintains the core information and flow of the original while organizing it into the specified sections.
`;

/**
 * @swagger
 * /api/create-ai:
 *   post:
 *     tags: [MarkAible AI]
 *     summary: Create AI voice agent prompt
 *     description: Generate a structured prompt for AI voice agents from basic script input
 *     security:
 *       - BearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - agentName
 *               - aiName
 *               - gender
 *               - language
 *               - callType
 *               - script
 *             properties:
 *               agentName:
 *                 type: string
 *                 example: "ABC Consulting"
 *               aiName:
 *                 type: string
 *                 example: "Priya"
 *               gender:
 *                 type: string
 *                 enum: [male, female]
 *                 example: "female"
 *               language:
 *                 type: string
 *                 enum: [hinglish, english]
 *                 example: "hinglish"
 *               callType:
 *                 type: string
 *                 enum: [inbound, outbound]
 *                 example: "outbound"
 *               script:
 *                 type: string
 *                 example: "We help students with education consulting..."
 *               welcomeMessage:
 *                 type: string
 *                 example: "Hello, welcome to our service"
 *               selectedVoice:
 *                 type: string
 *                 example: "female-hindi"
 *               aiModel:
 *                 type: string
 *                 example: "gpt-4"
 *               callTimeout:
 *                 type: number
 *                 example: 300
 *     responses:
 *       200:
 *         description: AI prompt created successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                 prompt:
 *                   type: string
 *       400:
 *         description: Bad request - validation error
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Internal server error
 */
router.post('/', authenticateToken, validateResourceOwnership, validationSchemas.promptGeneration, auditLog, async (req, res) => {
  try {
    const {
      agentName,
      welcomeMessage,
      selectedVoice,
      aiName,
      gender,
      aiModel,
      callTimeout,
      script,
      language,
      callType
    } = req.body;

    // Check if script needs to be restructured
    if (script && script.trim()) {
      try {
        // Generate structured prompt using Groq
        const structuredPrompt = await generateStructuredPrompt({
          agentName,
          welcomeMessage,
          selectedVoice,
          aiName,
          gender,
          aiModel,
          callTimeout,
          script,
          language,
          callType
        });
        
        res.status(200).json({ 
          message: 'AI prompt created successfully',
          prompt: structuredPrompt
        });
      } catch (promptError) {
        console.error('Error generating structured prompt:', promptError);
        // Fall back to basic prompt structure
        const basicPrompt = createBasicPrompt({
          agentName,
          welcomeMessage,
          selectedVoice,
          aiName,
          gender,
          aiModel,
          callTimeout,
          script,
          language,
          callType
        });
        
        res.status(200).json({ 
          message: 'AI prompt created with basic structure (fallback)',
          prompt: basicPrompt
        });
      }
    } else {
      // No script provided, return basic structure
      const basicPrompt = createBasicPrompt({
        agentName,
        welcomeMessage,
        selectedVoice,
        aiName,
        gender,
        aiModel,
        callTimeout,
        script: '',
        language,
        callType
      });
      
      res.status(200).json({ 
        message: 'AI prompt created with basic structure',
        prompt: basicPrompt
      });
    }
  } catch (error) {
    console.error('Error creating AI:', error);
    res.status(500).json({ error: 'Failed to create AI prompt' });
  }
});

/**
 * @swagger
 * /api/create-ai/generate-prompt:
 *   post:
 *     tags: [MarkAible AI]
 *     summary: Generate AI prompt from script
 *     description: Advanced prompt generation with Groq AI processing and fallback support
 *     security:
 *       - BearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - script
 *             properties:
 *               script:
 *                 type: string
 *                 description: Raw script content to be processed into structured prompt
 *               agentName:
 *                 type: string
 *               aiName:
 *                 type: string
 *               gender:
 *                 type: string
 *               language:
 *                 type: string
 *               callType:
 *                 type: string
 *     responses:
 *       200:
 *         description: Prompt generated successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 prompt:
 *                   type: string
 *                 payload:
 *                   type: object
 *                 fallback:
 *                   type: boolean
 *                 systemInstruction:
 *                   type: string
 *       400:
 *         description: Bad request
 *       500:
 *         description: Internal server error
 */
router.post('/generate-prompt', authenticateToken, validateResourceOwnership, auditLog, async (req, res) => {
  try {
    const promptData = req.body;
    
    if (!promptData || !promptData.script) {
      return res.status(400).json({ error: 'Missing prompt data or script' });
    }

    console.log('Processing prompt generation request');
    
    try {
      // Generate structured prompt
      const finalPrompt = await generateStructuredPrompt(promptData);
      
      // Remove the introductory line if present
      const cleanedPrompt = finalPrompt.replace(/^Here is the complete, ready-to-use prompt for an AI voice agent:\s*\n+/i, '');
      
      res.json({ 
        success: true,
        prompt: cleanedPrompt,
        payload: promptData,
        systemInstruction: aiSystemInstruction
      });
    } catch (error) {
      console.error('Error generating structured prompt:', error);
      
      // Fallback to basic prompt
      const basicPrompt = createBasicPrompt(promptData);
      
      res.json({ 
        success: true,
        prompt: basicPrompt,
        payload: promptData,
        fallback: true,
        error: error.message,
        systemInstruction: aiSystemInstruction
      });
    }
  } catch (error) {
    console.error('Error generating prompt:', error);
    res.status(500).json({ 
      error: 'Failed to generate prompt',
      details: error.message
    });
  }
});

// Function to create a basic prompt structure
function createBasicPrompt(promptData) {
  const {
    aiName,
    gender,
    agentName,
    welcomeMessage,
    script,
    selectedVoice,
    aiModel,
    callTimeout,
    language,
    callType
  } = promptData;
  
  // Create a basic prompt text in the style of the sample prompts
  return `You are ${aiName}, a ${gender} voice agent working for ${agentName}. ${welcomeMessage} Your goal is to understand the needs of the person you're speaking with and provide helpful information about your services. Use ${language || 'Hinglish'} language for communication. This is an ${callType || 'outbound'} call.

1. Greeting and Introduction
Start with a friendly greeting and introduce yourself.
"नमस्ते, मैं ${aiName} हूँ, ${agentName} से बात कर रही हूँ। क्या मैं आपका नाम जान सकती हूँ?"

2. Opening Context or Hook
"${agentName} एक company है जो ${script || 'various services'} में specialize करती है। हम आपकी help करना चाहते हैं।"

3. Interest-Based Branching (Yes / No / Unsure)
If interested: "बहुत अच्छा! मैं आपको और details दे सकती हूँ।"
If unsure: "कोई बात नहीं, मैं आपको थोड़ी और जानकारी दे सकती हूँ ताकि आप decide कर सकें।"
If not interested: "कोई बात नहीं, अगर future में कभी हमारी services की ज़रूरत हो तो contact कर सकते हैं।"

4. Qualification Questions
"क्या आप मुझे बता सकते हैं कि आप किस type की help ढूंढ रहे हैं?"
"क्या आपके पास इस बारे में कोई specific questions हैं?"

5. Solution Pitch
"हमारी services आपकी ज़रूरतों के according customize की जा सकती हैं। हम personalized solutions provide करते हैं जो आपके goals achieve करने में help करेंगे।"

6. Closing and Next Steps
"क्या आप हमारी services के बारे में और जानना चाहेंगे? मैं आपके लिए एक meeting schedule कर सकती हूँ हमारे experts के साथ।"

Output Notes:
Use Rs. और ₹ : Rupees or dont output any symbol.
Do not output bullet points. Do a short reply with a simple plain 1-2 lines, preferably within 300 chars. Do not output numbers or other special characters like 'dash' or plus etc. Try to Use a comma every 4-5 words.
Use Hinglish: ज्यादा technical या formal language avoid करें।
Female voice output में 'करूँगी' use करें 'करूँगा' की जगह।
शुरुआत हिंदी में करें, difficult हिंदी words को simple Hinglish में रखें।
Branch address पूरी तरह ना बताएं, सिर्फ city name बताएं।
दर्शन शाह के बारे में तभी बताएं जब student पूछे।
Currency के लिए 'rupees' लिखें, और special characters जैसे dash या plus ना use करें।
Conversation dynamic और engaging रखें, जिससे student ज़्यादा share करे।

This prompt was generated by MarkAible's AI prompt generation system based on a reference prompt.`;
}

// Function to generate a structured prompt using Groq
async function generateStructuredPrompt(promptData) {
  try {
    // Load sample prompts for reference
    const samplePromptsDir = path.join(__dirname, '../../sample-prompts');
    let samplePrompts = '';
    
    if (fs.existsSync(samplePromptsDir)) {
      const samplePromptFiles = fs.readdirSync(samplePromptsDir);
      
      // Get content from up to 3 sample prompts
      const maxSamples = Math.min(3, samplePromptFiles.length);
      for (let i = 0; i < maxSamples; i++) {
        const sampleContent = fs.readFileSync(path.join(samplePromptsDir, samplePromptFiles[i]), 'utf8');
        samplePrompts += `Sample Prompt ${i+1}:\n${sampleContent}\n\n`;
      }
    }
    
    // Create the system message
    const systemMessage = `
${aiSystemInstruction}

Here are some sample prompts for reference:
${samplePrompts}
    `;
    
    // Create the user message with the vague script
    const userMessage = `
Create a complete, ready-to-use prompt for an AI voice agent based on the following information.

VAGUE SCRIPT:
${promptData.script}

FORMAT YOUR RESPONSE EXACTLY LIKE THIS:
1. Start with an introduction paragraph: "You are [aiName], a [gender] voice agent working for [agentName]..." followed by a description of the agent's role and objective. Include that this is a ${promptData.callType || 'outbound'} call and the agent speaks ${promptData.language || 'Hinglish'}.

2. Then include this exact section header:
"3. Structure the prompt into:"

3. Then include these exact sections with content:
   - Greeting and Introduction
   - Opening Context or Hook
   - Interest-Based Branching (Yes / No / Unsure)
   - Qualification questions (open-ended, not hard-coded)
   - Solution Pitch (always flexible and general)
   - Closing and next steps

4. End with "Output Notes:" followed by instructions for the AI.

AGENT DETAILS:
- Name: ${promptData.aiName}
- Gender: ${promptData.gender}
- Company: ${promptData.agentName}
- Welcome Message: ${promptData.welcomeMessage}
- Language: ${promptData.language || 'Hinglish (Hindi + English)'}
- Call Type: ${promptData.callType || 'Outbound'}

LANGUAGE INSTRUCTIONS:
- If language is "hinglish": Use a natural mix of Hindi (in Devanagari script) and English (Roman script) in EVERY section. Each section must contain both Devanagari script and Roman script. Example: "नमस्ते, मैं [aiName] हूँ, क्या मैं आपकी help कर सकती हूँ?"
- DO NOT add English translations after Hindi text. The Hindi and English should be naturally mixed as in normal Hinglish conversation.
- If language is "english": Use only English. Example: "Hello, I am [aiName], how can I help you?"
- For female agents: Use feminine verb forms in Hindi (e.g., "करूँगी" instead of "करूँगा")
- IMPORTANT: For hinglish, ensure that EVERY section contains at least some text in Devanagari script and some in Roman script English where needed, naturally mixed together without translations.

CALL TYPE INSTRUCTIONS:
- If call type is "inbound": The agent should introduce themselves and ask how they can help.
- If call type is "outbound": The agent should introduce themselves, explain why they're calling, and ask if it's a good time to talk.

Your response should be a SINGLE CONTINUOUS TEXT (not JSON) that can be used directly by an AI voice agent.
Make it similar in style and format to the sample prompts I provided.

DO NOT include any introductory text like "Here is the complete prompt" at the beginning of your response.
Start directly with "You are [aiName]..."

IMPORTANT: Include these exact output notes at the end:
"Output Notes:
Use Rs. और ₹ : Rupees or dont output any symbol.
Do not output bullet points. Do a short reply with a simple plain 1-2 lines, preferably within 300 chars. Do not output numbers or other special characters like 'dash' or plus etc. Try to Use a comma every 4-5 words.
Use Hinglish: ज्यादा technical या formal language avoid करें।
Female voice output में 'करूँगी' use करें 'करूँगा' की जगह।
शुरुआत हिंदी में करें, difficult हिंदी words को simple Hinglish में रखें।
Branch address पूरी तरह ना बताएं, सिर्फ city name बताएं।
दर्शन शाह के बारे में तभी बताएं जब student पूछे।
Currency के लिए 'rupees' लिखें, और special characters जैसे dash या plus ना use करें।
Conversation dynamic और engaging रखें, जिससे student ज़्यादा share करे।

This prompt was generated by MarkAible's AI prompt generation system based on a reference prompt."
    `;
    
    // Call Groq API
    const response = await groqClient.chat.completions.create({
      messages: [
        { role: 'system', content: systemMessage },
        { role: 'user', content: userMessage }
      ],
      model: 'llama3-70b-8192',
      temperature: 0.7,
      max_tokens: 4000
    });
    
    // Extract the structured prompt from the response
    const structuredContent = response.choices[0].message.content;
    
    // Log the raw response for debugging
    console.log('Raw LLM response:', structuredContent);
    
    // Return the complete text prompt
    return structuredContent;
  } catch (error) {
    console.error('Error generating structured prompt:', error);
    throw error;
  }
}

module.exports = router;